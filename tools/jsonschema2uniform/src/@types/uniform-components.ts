/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface IPaths {}

export interface IComponents {
  schemas: {
    /** @description Public ID (used in code). Do not change after creation. */
    PublicIdProperty: string;
    /** @description The definition of a component parameter */
    ComponentDefinitionParameter: {
      id: IComponents['schemas']['PublicIdProperty'];
      /** @description Friendly name of the parameter */
      name: string;
      /** @description Appears next to the parameter in the Composition editor */
      helpText?: string;
      /** @description Type name of the parameter (provided by a Uniform integration) */
      type: string;
      /** @description The configuration object for the type (type-specific) */
      typeConfig?: unknown;
    };
    /** @description The definition of a named component slot that can contain other components */
    ComponentDefinitionSlot: {
      id: IComponents['schemas']['PublicIdProperty'];
      /** @description Friendly name of the slot */
      name: string;
      /** @description A list of component definition public IDs that are allowed in this named slot */
      allowedComponents: string[];
      /**
       * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
       * If allowAllComponents is true, this value is ignored.
       *
       * @default false
       */
      inheritAllowedComponents: boolean;
      /**
       * @description When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
       * When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
       */
      allowAllComponents?: boolean;
      /**
       * @description When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
       * When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
       */
      patternsInAllowedComponents?: boolean;
      /** @description Minimum valid number of components in this slot */
      minComponents?: number;
      /** @description Maximum valid number of components in this slot */
      maxComponents?: number;
    };
    /** @description The definition of a composition's slug settings */
    ComponentDefinitionSlugSettings: {
      /**
       * @description Whether the slug is required
       * no: slug is optional
       * yes: slug is required
       * disabled: slug is disabled and will not be shown in the editor
       *
       * @default no
       * @enum {string}
       */
      required?: 'no' | 'yes' | 'disabled';
      /**
       * @description Slug uniqueness configuration.
       * no = no unique constraint
       * local = must be unique within this component type
       * global = must be unique across all component types
       *
       * @enum {string}
       */
      unique?: 'no' | 'local' | 'global';
      /** @description Regular expression slugs must match */
      regularExpression?: string;
      /**
       * @description Custom error message when regular expression validation fails.
       * Has no effect if `regularExpression` is not set.
       */
      regularExpressionMessage?: string;
    };
    /** @description The definition of a component variant */
    ComponentDefinitionVariant: {
      id: IComponents['schemas']['PublicIdProperty'];
      /** @description Friendly name of the variant */
      name: string;
    };
    /** @description Permission set for a component defintion */
    ComponentDefinitionPermission: {
      roleId: IComponents['schemas']['PublicIdProperty'];
      /**
       * @description Permission type for this permission ComponentDefinition:
       * read | write | create | delete
       *
       * @enum {string}
       */
      permission: 'read' | 'write' | 'create' | 'delete';
      /** @description State of the component that this permission applies to */
      state: number;
    };
    /** @description Defines a component type that can live on a Composition */
    ComponentDefinition: {
      id: IComponents['schemas']['PublicIdProperty'];
      /** @description Friendly name of the component definition */
      name: string;
      /**
       * @description Icon name for the component definition (e.g. 'screen')
       * @default screen
       */
      icon?: string;
      /**
       * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
       * The parameter type must support being used as a title parameter for this to work.
       *
       * @default undefined
       */
      titleParameter?: string | undefined;
      /**
       * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
       * @default false
       */
      canBeComposition?: boolean;
      /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
      parameters?: IComponents['schemas']['ComponentDefinitionParameter'][];
      /**
       * Format: uuid
       * @description Reference to the category this component definition belongs to
       * @default undefined
       */
      categoryId?: string | undefined;
      /**
       * @description Description of the component definition
       * @default undefined
       */
      description?: string;
      /**
       * @description Description of the component definition
       * @default undefined
       */
      previewImageUrl?: string;
      /**
       * @description if this component uses team permissions or custom permissions
       * @default true
       */
      useTeamPermissions?: boolean;
      /** @description Custom role permissions for this component definition */
      permissions?: IComponents['schemas']['ComponentDefinitionPermission'][];
      /** @description The named slots for this component; placement areas where arrays of other components can be added. */
      slots?: IComponents['schemas']['ComponentDefinitionSlot'][];
      slugSettings?: IComponents['schemas']['ComponentDefinitionSlugSettings'];
      /** @description Default component instance value */
      defaults?: IComponents['schemas']['ComponentInstance'] | undefined;
      /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
      variants?: IComponents['schemas']['ComponentDefinitionVariant'][];
      /** @description Created date string for this definition (ignored for writes) */
      created?: string;
      /** @description Last modified date string for this definition (ignored for writes) */
      updated?: string;
    };
    /** @description Defines a content type */
    ContentType: {
      id: IComponents['schemas']['PublicIdProperty'];
      /** @description Friendly name of the content type */
      name: string;
      /**
       * @description The public ID of the field whose value should be used to create a display name for entries of this content type in the UI.
       * The field type must support being used as an entry name for this to work.
       */
      entryName?: string | undefined;
      /** @description The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc. */
      fields?: IComponents['schemas']['ComponentDefinitionParameter'][];
      /**
       * @description Description of the content type
       * @default undefined
       */
      description?: string;
      /**
       * @description Icon name for the content type (e.g. 'screen')
       * @default file-document
       */
      icon?: string;
      /** @description Created date string for this content type (ignored for writes) */
      created?: string;
      /** @description Last modified date string for this content type (ignored for writes) */
      updated?: string;
      slugSettings?: IComponents['schemas']['ComponentDefinitionSlugSettings'];
      /**
       * @description The definition type of this content type (block or content type)
       * @default contentType
       * @enum {string}
       */
      type?: 'contentType' | 'block';
    };
    /** @description Defines an editable parameter on a component. */
    ComponentParameter: {
      /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
      value: unknown;
      /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
      type: string;
      /** @deprecated */
      connectedData?: IComponents['schemas']['DataElementConnectionDefinition'];
    };
    /** @description Defines a connection to a dynamic token on a data resource. */
    DataElementConnectionDefinition: {
      /** @description A JSON Pointer expression that defines the data resource dynamic token value. */
      pointer: string;
      /**
       * @description The syntax used to select the dynamic token to bind to
       * @enum {string}
       */
      syntax: 'jptr';
    };
    /** @description Defines the shape of a component instance served by the composition API. */
    ComponentInstance: {
      /** @description Type of the component instance (public_id of its definition) */
      type: string;
      /** @description Component parameter values for the component instance */
      parameters?: {
        [key: string]: IComponents['schemas']['ComponentParameter'];
      };
      /** @description Public ID of alternate visual appearance for this component, if any selected */
      variant?: string;
      /** @description Slots containing any child components */
      slots?: { [key: string]: IComponents['schemas']['ComponentInstance'][] };
      /**
       * @description Unique identifier of the component within the composition.
       * No assumptions should be made about the format of this value other than "it will be unique."
       * This is not returned in GET replies unless specifically requested via `withComponentIDs` API parameter.
       * When updating or creating a composition, if you do not specify an _id for each component, one will be created and stored for you.
       */
      _id?: string;
      /** @description Indicates this component instance should be sourced from a pattern library pattern. */
      _pattern?: string;
      _dataResources?: IComponents['schemas']['DataResourceDefinitions'];
      /**
       * @description Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
       * Means nothing for PUTs; it will be ignored.
       */
      _patternDataResources?: {
        [key: string]: IComponents['schemas']['DataResourceDefinition'];
      };
      /**
       * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
       * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
       * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
       * Means nothing for PUTs; it will be ignored.
       *
       * @enum {string}
       */
      _patternError?: 'NOTFOUND' | 'CYCLIC';
      /**
       * @description Defines patch overrides to component IDs that live in the composition.
       * This can be used to override parameters that are defined on patterns,
       * including nested patterns, with values that are specific to this composition.
       * The keys in this object are component IDs.
       * Overrides are applied from the top down, so for example if both the composition
       * and a pattern on the composition define an override on a nested pattern,
       * the composition's override replaces the pattern's.
       *
       * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
       * Future updates that do not break the overrides-applied state of a composition may be made without notice.
       */
      _overrides?: {
        [key: string]: IComponents['schemas']['ComponentOverride'];
      };
      /**
       * @description When used on a pattern, defines how the pattern's parameters may be overridden
       * by consumers of the pattern.
       *
       * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
       * Future updates that do not break the overrides-applied state of a composition may be made without notice.
       */
      _overridability?: IComponents['schemas']['ComponentOverridability'];
    };
    /** @description Defines the shape of the root component in a composition */
    RootComponentInstance: {
      /** @description Type of the component instance (public_id of its definition) */
      type: string;
      /** @description Component parameter values for the component instance */
      parameters?: {
        [key: string]: IComponents['schemas']['ComponentParameter'];
      };
      /** @description Public ID of alternate visual appearance for this component, if any selected */
      variant?: string;
      /** @description Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated. */
      projectMapNodes?: IComponents['schemas']['CompositionProjectMapNodeInfo'][];
      /** @description Slots containing any child components */
      slots?: { [key: string]: IComponents['schemas']['ComponentInstance'][] };
      /** @description The public UUID of the composition. */
      _id: string;
      /** @description Slug pattern of this component. */
      _slug?: string | undefined;
      /** @description Friendly name of this component. */
      _name: string;
      _dataResources?: IComponents['schemas']['DataResourceDefinitions'];
      /**
       * @description Defines patch overrides to component IDs that live in the composition.
       * This can be used to override parameters that are defined on patterns,
       * including nested patterns, with values that are specific to this composition.
       * The keys in this object are component IDs.
       * Overrides are applied from the top down, so for example if both the composition
       * and a pattern on the composition define an override on a nested pattern,
       * the composition's override replaces the pattern's.
       *
       * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
       * Future updates that do not break the overrides-applied state of a composition may be made without notice.
       */
      _overrides?: {
        [key: string]: IComponents['schemas']['ComponentOverride'];
      };
      /**
       * @description When used on a pattern, defines how the pattern's parameters may be overridden
       * by consumers of the pattern.
       *
       * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
       * Future updates that do not break the overrides-applied state of a composition may be made without notice.
       */
      _overridability?: IComponents['schemas']['ComponentOverridability'];
    };
    /**
     * @description Defines how to override a specific component.
     *
     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
     */
    ComponentOverride: {
      parameters?: {
        [key: string]: IComponents['schemas']['ComponentParameter'];
      };
      variant?: string;
    };
    /**
     * @description Defines how a component on a pattern may have its values overridden.
     * NOTE: Data resources' overridability is defined in the data resource definition, not here.
     *
     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
     */
    ComponentOverridability: {
      /** @description Defines component parameter value overrides. Keys are the parameter public ID. */
      parameters?: { [key: string]: IComponents['schemas']['OverrideOptions'] };
      /** @description Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false. */
      variants?: boolean;
    };
    /**
     * @description Whether a parameter is overridable
     *
     * NOTE: This is considered an internal data structure and is not guaranteed to be stable.
     * Future updates that do not break the overrides-applied state of a composition may be made without notice.
     *
     * @enum {string}
     */
    OverrideOptions: 'yes' | 'no';
    /**
     * @description An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
     * These are created in the UI and shared across a whole project.
     * NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
     * for all header, parameter, and variable values to obscure the actual encrypted secret value.
     */
    DataSource: {
      /** @description Public ID of the data source */
      id: string;
      /** @description Display name of the data source */
      displayName: string;
      /** @description The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration) */
      connectorType: string;
      /** @description Base resource URL of the data source. No trailing slash. */
      baseUrl: string;
      /** @description HTTP headers to pass with requests to the data source */
      headers?: {
        key: string;
        value: string;
      }[];
      /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
      parameters?: {
        key: string;
        value: string;
      }[];
      /** @description Variables needed to make calls to the data source */
      variables?: {
        [key: string]: IComponents['schemas']['DataVariableDefinition'];
      };
      /** @description Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations) */
      custom?: { [key: string]: unknown };
    };
    /** @description A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project. */
    DataType: {
      /** @description Public ID of the data type */
      id: string;
      /** @description Display name of the data type */
      displayName: string;
      /** @description Public ID of the associated data source */
      dataSourceId: string;
      /**
       * @description A connector-specific archetype for this data type; used to select UI as well as perform any
       * necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
       * no special UI or processing is required.
       */
      archetype?: string;
      allowedOnComponents?: string[];
      /** @description Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash. */
      path: string;
      /** @description Time-to-live (in seconds) for the resource data cache. */
      ttl?: number;
      /** @description A key for the resource data cache purging. */
      purgeKey?: string;
      /** @description URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons. */
      badgeIconUrl?: string;
      /** @description HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys. */
      headers?: {
        key: string;
        value: string;
        omitIfEmpty?: boolean;
      }[];
      /** @description Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys. */
      parameters?: {
        key: string;
        value: string;
        omitIfEmpty?: boolean;
      }[];
      /** @description Body to pass with requests to the data type (ignored unless method is POST) */
      body?: string;
      /**
       * @description HTTP method to use with requests to the data type.
       * @default GET
       * @enum {string}
       */
      method: 'GET' | 'POST' | 'HEAD';
      /** @description Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys. */
      variables?: {
        [key: string]: IComponents['schemas']['DataVariableDefinition'];
      };
      /** @description Custom configuration specific to the data source being defined */
      custom?: { [key: string]: unknown };
    };
    /** @description Defines the shape of a data variable on a Data Source or Data Type */
    DataVariableDefinition: {
      /** @description Display name of the data variable */
      displayName?: string;
      /** @description Explanatory text that is provided to the data resource editor to explain what this variable does. */
      helpText?: string;
      /**
       * @description Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
       * @default text
       */
      type?: string;
      /** @description Default value of the data variable */
      default: string;
      /** @description Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list. */
      order?: number;
      /**
       * @description An optional arbitrary human readable source identifier to describe where this variable is from.
       * Some user interfaces may group variables by source value, for example 'From URL' or 'My Integration'.
       */
      source?: string;
    };
    /**
     * @description Data definitions attached to this component. The property name is the key of the data in the data document.
     * Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
     */
    DataResourceDefinitions: {
      [key: string]: IComponents['schemas']['DataResourceDefinition'];
    };
    /** @description Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters */
    DataResourceDefinition: {
      /** @description Public ID of the data type that provides this data */
      type: string;
      /** @description Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false. */
      isPatternParameter?: boolean;
      /**
       * @description When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
       * Unless specifically overridden, the pattern data parameter will be provided with a undefined default value - leaving any data connections to it unresolvable.
       * If isPatternParameter is false or undefined, this has no meaning.
       */
      ignorePatternParameterDefault?: boolean;
      variables?: IComponents['schemas']['DataResourceVariables'];
    };
    /** @description Variable values for a data resource. */
    DataResourceVariables: { [key: string]: string };
    /** @description Category for tagging canvas entities */
    Category: {
      /**
       * Format: uuid
       * @description Unique identifier for the category
       */
      id: string;
      /** @description Display name of the category */
      name: string;
      /**
       * @description Sets the order of the category when displayed in a list with other categories. If not set, the order defaults to alphabetical with any explicitly set orders first in the list.
       * @default 0
       */
      order?: number;
    };
    /** @description Project map node information related to a component. */
    CompositionProjectMapNodeInfo: {
      /**
       * Format: uuid
       * @description Unique identifier for the project map node
       */
      id: string;
      /** @description Path of the project map node */
      path: string;
      /**
       * Format: uuid
       * @description Unique identifier for the project map that this node belongs to.
       */
      projectMapId: string;
    };
  };
}

export interface IOperations {}

export interface IExternal {}
