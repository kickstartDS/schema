openapi: '3.0.2'
info:
  title: Uniform Canvas API Types
  version: '1.0'
  # note: this is named 'uniform' so that it sorts AFTER the swagger.yml
  # so that it does not take over the version and title when it's merged
paths: {}
components:
  schemas:
    # Component Definition Types
    PublicIdProperty:
      description: Public ID (used in code). Do not change after creation.
      type: string
      minLength: 1
      maxLength: 36
      pattern: '^[a-zA-Z0-9-_]+$'

    ComponentDefinitionParameter:
      type: object
      description: The definition of a component parameter
      required:
        - id
        - name
        - type
      properties:
        id:
          $ref: '#/components/schemas/PublicIdProperty'
        name:
          type: string
          description: Friendly name of the parameter
          maxLength: 100
          minLength: 1
        helpText:
          type: string
          description: Appears next to the parameter in the Composition editor
          maxLength: 128
          minLength: 0
        type:
          type: string
          description: Type name of the parameter (provided by a Uniform integration)
          maxLength: 50
          minLength: 1
        typeConfig:
          description: The configuration object for the type (type-specific)
      additionalProperties: false

    ComponentDefinitionSlot:
      type: object
      description: The definition of a named component slot that can contain other components
      required:
        - id
        - name
        - inheritAllowedComponents
        - allowedComponents
      properties:
        id:
          $ref: '#/components/schemas/PublicIdProperty'
        name:
          type: string
          description: Friendly name of the slot
          maxLength: 100
          minLength: 1
        allowedComponents:
          type: array
          description: A list of component definition public IDs that are allowed in this named slot
          items:
            type: string
            maxLength: 40
        inheritAllowedComponents:
          type: boolean
          description: |
            Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
            If allowAllComponents is true, this value is ignored.
          default: false
        allowAllComponents:
          type: boolean
          description: |
            When false or not defined, only components in allowedComponents may be added to this slot - and if allowedComponents is empty, nothing can be added.
            When true, every component and pattern that is defined may be added to this slot regardless of any other setting including inheritAllowedComponents.
        patternsInAllowedComponents:
          type: boolean
          description: |
            When not defined, or false: all patterns for components listed in allowedComponents are automatically allowed in the slot.
            When true: patterns for components listed in allowedComponents are not allowed in the slot unless explicitly added to allowedComponents as `$p:<patternid>`
        minComponents:
          type: integer
          description: Minimum valid number of components in this slot
          maximum: 2147483647
        maxComponents:
          type: integer
          description: Maximum valid number of components in this slot
          maximum: 2147483647
      additionalProperties: false

    ComponentDefinitionSlugSettings:
      type: object
      description: The definition of a composition's slug settings
      properties:
        required:
          type: string
          description: |
            Whether the slug is required
            no: slug is optional
            yes: slug is required
            disabled: slug is disabled and will not be shown in the editor
          default: no
          enum:
            - no
            - yes
            - disabled
        unique:
          type: string
          description: |
            Slug uniqueness configuration.
            no = no unique constraint
            local = must be unique within this component type
            global = must be unique across all component types
          enum:
            - no
            - local
            - global
        regularExpression:
          type: string
          description: Regular expression slugs must match
        regularExpressionMessage:
          type: string
          description: |
            Custom error message when regular expression validation fails.
            Has no effect if `regularExpression` is not set.

    ComponentDefinitionVariant:
      type: object
      description: The definition of a component variant
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/PublicIdProperty'
        name:
          type: string
          description: Friendly name of the variant
          maxLength: 100
          minLength: 1
      additionalProperties: false

    ComponentDefinitionPermission:
      type: object
      description: Permission set for a component defintion
      required:
        - roleId
        - permission
        - state
      properties:
        roleId:
          $ref: '#/components/schemas/PublicIdProperty'
        permission:
          type: string
          description: |
            Permission type for this permission ComponentDefinition:
            read | write | create | delete
          enum:
            - read
            - write
            - create
            - delete
        state:
          type: integer
          description: State of the component that this permission applies to
          maximum: 64
          minimum: 0
      additionalProperties: false

    ComponentDefinition:
      type: object
      description: Defines a component type that can live on a Composition
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/PublicIdProperty'
        name:
          type: string
          description: Friendly name of the component definition
          maxLength: 100
          minLength: 1
        icon:
          type: string
          description: Icon name for the component definition (e.g. 'screen')
          default: screen
          maxLength: 2024
        titleParameter:
          type: string
          description: |
            The public ID of the parameter whose value should be used to create a display title for this component in the UI.
            The parameter type must support being used as a title parameter for this to work.
          maxLength: 36
          nullable: true
          default: null
        canBeComposition:
          type: boolean
          description: Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
          default: false
        parameters:
          type: array
          description: The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries.
          items:
            $ref: '#/components/schemas/ComponentDefinitionParameter'
        categoryId:
          type: string
          format: uuid
          description: Reference to the category this component definition belongs to
          nullable: true
          default: null
        description:
          type: string
          description: Description of the component definition
          maxLength: 2024
          default: null
        previewImageUrl:
          type: string
          description: Description of the component definition
          maxLength: 2024
          default: null
        useTeamPermissions:
          type: boolean
          description: if this component uses team permissions or custom permissions
          default: true
        permissions:
          type: array
          description: Custom role permissions for this component definition
          items:
            $ref: '#/components/schemas/ComponentDefinitionPermission'
        slots:
          type: array
          description: The named slots for this component; placement areas where arrays of other components can be added.
          items:
            $ref: '#/components/schemas/ComponentDefinitionSlot'
        slugSettings:
          $ref: '#/components/schemas/ComponentDefinitionSlugSettings'
        defaults:
          description: Default component instance value
          # workaround:
          # `nullable: true` throws at runtime ("nullable" cannot be used without "type")
          # type: 'null' - part of OpenAPI 3.1 (we use 3.0)
          oneOf:
            - $ref: '#/components/schemas/ComponentInstance'
            - enum: [null]
        variants:
          type: array
          description: Named variants for this component; enables creation of visual variants that use the same parameter data
          items:
            $ref: '#/components/schemas/ComponentDefinitionVariant'
        created:
          type: string
          description: Created date string for this definition (ignored for writes)
          maxLength: 50
        updated:
          type: string
          description: Last modified date string for this definition (ignored for writes)
          maxLength: 50
      additionalProperties: false

    ContentType:
      type: object
      description: Defines a content type
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/PublicIdProperty'
        name:
          type: string
          description: Friendly name of the content type
          maxLength: 100
          minLength: 1
        entryName:
          type: string
          description: |
            The public ID of the field whose value should be used to create a display name for entries of this content type in the UI.
            The field type must support being used as an entry name for this to work.
          maxLength: 36
          nullable: true
        fields:
          type: array
          description: The fields for this content type. Fields are key-value pairs that can be text, numbers, JSON objects, etc.
          items:
            $ref: '#/components/schemas/ComponentDefinitionParameter'
        description:
          type: string
          description: Description of the content type
          maxLength: 2024
          default: null
        icon:
          type: string
          description: Icon name for the content type (e.g. 'screen')
          default: file-document
          maxLength: 2024
        created:
          type: string
          description: Created date string for this content type (ignored for writes)
          maxLength: 50
        updated:
          type: string
          description: Last modified date string for this content type (ignored for writes)
          maxLength: 50
        slugSettings:
          $ref: '#/components/schemas/ComponentDefinitionSlugSettings'
        type:
          description: The definition type of this content type (block or content type)
          type: string
          enum:
            - contentType
            - block
          default: contentType
      additionalProperties: false

    # Component Instance Types
    ComponentParameter:
      type: object
      description: Defines an editable parameter on a component.
      properties:
        value:
          description: The value of the parameter. Any JSON-serializable value is acceptable.
        type:
          type: string
          description: The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it.
          minLength: 1
        connectedData:
          deprecated: true
          $ref: '#/components/schemas/DataElementConnectionDefinition'
      required:
        - value
        - type
      additionalProperties: false

    DataElementConnectionDefinition:
      type: object
      description: |
        Defines a connection to a dynamic token on a data resource.
      properties:
        pointer:
          description: A JSON Pointer expression that defines the data resource dynamic token value.
          type: string
          maxLength: 256
        syntax:
          type: string
          description: The syntax used to select the dynamic token to bind to
          enum:
            # only JSON Pointer is currently supported
            - jptr
      required:
        - pointer
        - syntax
      additionalProperties: false

    ComponentInstance:
      type: object
      description: Defines the shape of a component instance served by the composition API.
      required:
        - type
      properties:
        type:
          type: string
          description: Type of the component instance (public_id of its definition)
          maxLength: 36
          minLength: 1
        parameters:
          type: object
          description: Component parameter values for the component instance
          additionalProperties:
            $ref: '#/components/schemas/ComponentParameter'
        variant:
          type: string
          description: Public ID of alternate visual appearance for this component, if any selected
        slots:
          type: object
          description: Slots containing any child components
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ComponentInstance'
        _id:
          type: string
          description: |
            Unique identifier of the component within the composition.
            No assumptions should be made about the format of this value other than "it will be unique."
            This is not returned in GET replies unless specifically requested via `withComponentIDs` API parameter.
            When updating or creating a composition, if you do not specify an _id for each component, one will be created and stored for you.
          minLength: 1
          maxLength: 2000
        _pattern:
          type: string
          pattern: ^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$
          description: Indicates this component instance should be sourced from a pattern library pattern.
        _dataResources:
          $ref: '#/components/schemas/DataResourceDefinitions'
        _patternDataResources:
          type: object
          description: |
            Data definitions coming from a pattern resolved for this component. Merged with _dataResources during resolution.
            Means nothing for PUTs; it will be ignored.
          additionalProperties:
            $ref: '#/components/schemas/DataResourceDefinition'
        _patternError:
          type: string
          description: |
            Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
            CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
            NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
            Means nothing for PUTs; it will be ignored.
          enum:
            - NOTFOUND
            - CYCLIC
        _overrides:
          type: object
          description: |
            Defines patch overrides to component IDs that live in the composition.
            This can be used to override parameters that are defined on patterns,
            including nested patterns, with values that are specific to this composition.
            The keys in this object are component IDs.
            Overrides are applied from the top down, so for example if both the composition
            and a pattern on the composition define an override on a nested pattern,
            the composition's override replaces the pattern's.

            NOTE: This is considered an internal data structure and is not guaranteed to be stable.
            Future updates that do not break the overrides-applied state of a composition may be made without notice.
          additionalProperties:
            $ref: '#/components/schemas/ComponentOverride'
        _overridability:
          description: |
            When used on a pattern, defines how the pattern's parameters may be overridden
            by consumers of the pattern.

            NOTE: This is considered an internal data structure and is not guaranteed to be stable.
            Future updates that do not break the overrides-applied state of a composition may be made without notice.
          $ref: '#/components/schemas/ComponentOverridability'

      additionalProperties: false

    RootComponentInstance:
      type: object
      description: Defines the shape of the root component in a composition
      required:
        - type
        - _id
        - _name
      properties:
        type:
          type: string
          description: Type of the component instance (public_id of its definition)
          maxLength: 36
          minLength: 1
        parameters:
          type: object
          description: Component parameter values for the component instance
          additionalProperties:
            $ref: '#/components/schemas/ComponentParameter'
        variant:
          type: string
          description: Public ID of alternate visual appearance for this component, if any selected
          maxLength: 100
        projectMapNodes:
          type: array
          description: Project map nodes associated with this component.  Must pass withProjectMapNodes parameter to be populated.
          items:
            $ref: '#/components/schemas/CompositionProjectMapNodeInfo'
        slots:
          type: object
          description: Slots containing any child components
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/ComponentInstance'
        _id:
          type: string
          description: The public UUID of the composition.
          pattern: ^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$
          minLength: 1
        _slug:
          type: string
          description: Slug pattern of this component.
          nullable: true
          maxLength: 512
        _name:
          type: string
          description: Friendly name of this component.
          maxLength: 100
          minLength: 1
        _dataResources:
          $ref: '#/components/schemas/DataResourceDefinitions'
        _overrides:
          type: object
          description: |
            Defines patch overrides to component IDs that live in the composition.
            This can be used to override parameters that are defined on patterns,
            including nested patterns, with values that are specific to this composition.
            The keys in this object are component IDs.
            Overrides are applied from the top down, so for example if both the composition
            and a pattern on the composition define an override on a nested pattern,
            the composition's override replaces the pattern's.

            NOTE: This is considered an internal data structure and is not guaranteed to be stable.
            Future updates that do not break the overrides-applied state of a composition may be made without notice.
          additionalProperties:
            $ref: '#/components/schemas/ComponentOverride'
        _overridability:
          description: |
            When used on a pattern, defines how the pattern's parameters may be overridden
            by consumers of the pattern.

            NOTE: This is considered an internal data structure and is not guaranteed to be stable.
            Future updates that do not break the overrides-applied state of a composition may be made without notice.
          $ref: '#/components/schemas/ComponentOverridability'
      additionalProperties: false

    ComponentOverride:
      type: object
      description: |
        Defines how to override a specific component.

        NOTE: This is considered an internal data structure and is not guaranteed to be stable.
        Future updates that do not break the overrides-applied state of a composition may be made without notice.
      properties:
        parameters:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentParameter'
        variant:
          type: string
          maxLength: 100

    ComponentOverridability:
      description: |
        Defines how a component on a pattern may have its values overridden.
        NOTE: Data resources' overridability is defined in the data resource definition, not here.

        NOTE: This is considered an internal data structure and is not guaranteed to be stable.
        Future updates that do not break the overrides-applied state of a composition may be made without notice.
      type: object
      properties:
        parameters:
          type: object
          description: Defines component parameter value overrides. Keys are the parameter public ID.
          additionalProperties:
            $ref: '#/components/schemas/OverrideOptions'
        variants:
          description: Allows overriding a display variant is allowed, if it is defined on the component the pattern is derived from. Default = false.
          type: boolean
    OverrideOptions:
      description: |
        Whether a parameter is overridable

        NOTE: This is considered an internal data structure and is not guaranteed to be stable.
        Future updates that do not break the overrides-applied state of a composition may be made without notice.
      type: string
      # enum provides us options to expand without breaking changes vs boolean
      enum:
        - 'yes'
        - 'no'

    DataSource:
      type: object
      description: |
        An instance of a data source (i.e. "Master environment of the stable space", "Yelp API", "Sanity dev dataset").
        These are created in the UI and shared across a whole project.
        NOTE: if you acquire a list of data sources or do not have manage permissions, you will receive "SECRET"
        for all header, parameter, and variable values to obscure the actual encrypted secret value.
      required:
        - id
        - displayName
        - connectorType
        - baseUrl
      properties:
        id:
          type: string
          description: Public ID of the data source
          minLength: 1
          maxLength: 36
          pattern: ^[A-Za-z0-9\-]+$
        displayName:
          type: string
          description: Display name of the data source
          maxLength: 100
          minLength: 1
        connectorType:
          type: string
          description: The type of data connector this connects to (e.g. 'cms-items', provided by an intalled integration)
          minLength: 1
          maxLength: 36
          pattern: ^[A-Za-z0-9\-]+$
        baseUrl:
          type: string
          description: Base resource URL of the data source. No trailing slash.
          maxLength: 256
          minLength: 1
          pattern: ^https://.+[^/]$
        headers:
          type: array
          description: HTTP headers to pass with requests to the data source
          items:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                type: string
        parameters:
          type: array
          description: Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys.
          items:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                type: string
        variables:
          type: object
          description: Variables needed to make calls to the data source
          additionalProperties:
            $ref: '#/components/schemas/DataVariableDefinition'
        custom:
          type: object
          description: Custom configuration specific to the data source being defined (used to maintain UI state for custom integrations)
      additionalProperties: false

    DataType:
      type: object
      description: A specific type of data that a Data Source can provide (i.e. "Recipe", "Recipes List by Tag", "Yelp Reviews of My Restaurant"). These are created in the UI and shared a whole project.
      required:
        - id
        - displayName
        - path
        - dataSourceId
        - method
      properties:
        id:
          type: string
          description: Public ID of the data type
          minLength: 1
          maxLength: 36
          pattern: ^[A-Za-z0-9\-]+$
        displayName:
          type: string
          description: Display name of the data type
          maxLength: 100
          minLength: 1
        dataSourceId:
          type: string
          description: Public ID of the associated data source
          minLength: 1
          maxLength: 36
          pattern: ^[A-Za-z0-9\-]+$
        archetype:
          type: string
          description: |
            A connector-specific archetype for this data type; used to select UI as well as perform any
            necessary post-processing on the response. e.g. 'cms-entry', 'cms-query'. Can be undefined if
            no special UI or processing is required.
          minLength: 1
          maxLength: 36
          pattern: ^[A-Za-z0-9\-]+$
        allowedOnComponents:
          type: array
          items:
            type: string
            description: |
              Public ID of a component type that this data type can be used on.
              For components which are compositions, this allows this data type as resource data.
              For non-composition components, this allows this data type as a pattern resource data.
            minLength: 1
            maxLength: 36
            pattern: ^[A-Za-z0-9\-]+$
        path:
          type: string
          description: Resource path, appended to the data source's baseUrl (e.g. baseUrl = https://base.url, path = /v1/endpoint -> final URL https://base.url/v1/endpoint). Must have leading slash.
          maxLength: 1024
          minLength: 0
        ttl:
          type: integer
          description: Time-to-live (in seconds) for the resource data cache.
        purgeKey:
          type: string
          description: A key for the resource data cache purging.
          minLength: 36
          maxLength: 36
        badgeIconUrl:
          description: URL to a custom badge icon for the Uniform dashboard for this data type. If not set falls back to the data connector or integration icons.
          type: string
          minLength: 6
          maxLength: 256
        headers:
          description: HTTP headers to pass with requests to the data type. Merged with headers from the data source, overriding identical keys.
          type: array
          items:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                type: string
              omitIfEmpty:
                type: boolean
        parameters:
          description: Query String parameters to pass with requests to the data type. Merged with parameters from the data source, overriding identical keys.
          type: array
          items:
            type: object
            required:
              - key
              - value
            properties:
              key:
                type: string
              value:
                type: string
              omitIfEmpty:
                type: boolean
        body:
          type: string
          description: Body to pass with requests to the data type (ignored unless method is POST)
          maxLength: 8192
        method:
          type: string
          description: HTTP method to use with requests to the data type.
          default: GET
          enum:
            - GET
            - POST
            - HEAD
        variables:
          type: object
          description: Variables needed to make calls to the data type. Merged with variables from the data source, overriding identical keys.
          additionalProperties:
            $ref: '#/components/schemas/DataVariableDefinition'
        custom:
          type: object
          description: Custom configuration specific to the data source being defined
      additionalProperties: false

    DataVariableDefinition:
      type: object
      description: Defines the shape of a data variable on a Data Source or Data Type
      required:
        - default
      properties:
        displayName:
          type: string
          description: Display name of the data variable
          maxLength: 100
          minLength: 1
        helpText:
          type: string
          description: Explanatory text that is provided to the data resource editor to explain what this variable does.
          maxLength: 256
          minLength: 1
        type:
          type: string
          description: Type of the data variable. Optionally used as a point of reference for custom integrations to decide how to render an editor for a variable.
          default: text
          maxLength: 36
          minLength: 1
          pattern: ^[A-Za-z0-9\-]+$
        default:
          type: string
          description: Default value of the data variable
        order:
          type: number
          description: Sets the order of the variable when displayed in a list with other variables. If not set, the order defaults to alphabetical with any explicitly set orders first in the list.
        source:
          type: string
          description: |
            An optional arbitrary human readable source identifier to describe where this variable is from.
            Some user interfaces may group variables by source value, for example 'From URL' or 'My Integration'.

      additionalProperties: false

    DataResourceDefinitions:
      type: object
      description: |
        Data definitions attached to this component. The property name is the key of the data in the data document.
        Note: data definitions are inherited from ancestors at runtime (and may be overridden by descendants that use the same key).
      additionalProperties:
        $ref: '#/components/schemas/DataResourceDefinition'

    DataResourceDefinition:
      type: object
      description: Defines a data resource, which is a named JSON document, usually from an API response, which may be projected onto parameters
      required:
        - type
      properties:
        type:
          type: string
          description: Public ID of the data type that provides this data
          minLength: 1
          maxLength: 36
          pattern: ^[A-Za-z0-9\-]+$
        isPatternParameter:
          type: boolean
          description: Whether this data is a pattern data resource that can be overridden when a pattern is referenced on another composition. If this is not a pattern composition, this has no meaning and should not be used. If unspecified, the default is false.
        ignorePatternParameterDefault:
          type: boolean
          description: |
            When true, the default data resource of a pattern data parameter (isPatternParameter=true) will be ignored when the pattern is referenced.
            Unless specifically overridden, the pattern data parameter will be provided with a null default value - leaving any data connections to it unresolvable.
            If isPatternParameter is false or undefined, this has no meaning.
        variables:
          $ref: '#/components/schemas/DataResourceVariables'
      additionalProperties: false

    DataResourceVariables:
      type: object
      description: Variable values for a data resource.
      additionalProperties:
        type: string

    Category:
      type: object
      description: Category for tagging canvas entities
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: 'uuid'
          description: Unique identifier for the category
        name:
          type: string
          description: Display name of the category
          maxLength: 100
          minLength: 1
        order:
          default: 0
          type: number
          description: Sets the order of the category when displayed in a list with other categories. If not set, the order defaults to alphabetical with any explicitly set orders first in the list.

    CompositionProjectMapNodeInfo:
      type: object
      description: Project map node information related to a component.
      required:
        - id
        - path
        - projectMapId
      properties:
        id:
          type: string
          format: 'uuid'
          description: Unique identifier for the project map node
        path:
          type: string
          description: Path of the project map node
          minLength: 1
          maxLength: 2048
        projectMapId:
          type: string
          format: uuid
          description: Unique identifier for the project map that this node belongs to.
