/* eslint-disable @typescript-eslint/naming-convention */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {}

export interface components {
  schemas: {
    /** @description Public ID (used in code). Do not change after creation. */
    PublicIdProperty: string;
    /** @description The definition of a component parameter */
    ComponentDefinitionParameter: {
      id: components['schemas']['PublicIdProperty'];
      /** @description Friendly name of the parameter */
      name: string;
      /** @description Appears next to the parameter in the Composition editor */
      helpText?: string;
      /** @description Type name of the parameter (provided by a Uniform integration) */
      type: string;
      /** @description The configuration object for the type (type-specific) */
      typeConfig?: unknown;
    };
    /** @description The definition of a named component slot that can contain other components */
    ComponentDefinitionSlot: {
      id: components['schemas']['PublicIdProperty'];
      /** @description Friendly name of the slot */
      name: string;
      /** @description A list of component definition public IDs that are allowed in this named slot */
      allowedComponents: string[];
      /**
       * @description Whether this slot inherits its allowed components from the parent slot it lives in. If true, allowedComponents is irrelevant.
       * @default false
       */
      inheritAllowedComponents: boolean;
      /** @description Minimum valid number of components in this slot */
      minComponents?: number;
      /** @description Maximum valid number of components in this slot */
      maxComponents?: number;
    };
    /** @description The definition of a composition's slug settings */
    ComponentDefinitionSlugSettings: {
      /**
       * @description Whether the slug is required
       * no: slug is optional
       * yes: slug is required
       * disabled: slug is disabled and will not be shown in the editor
       *
       * @default no
       * @enum {string}
       */
      required?: 'no' | 'yes' | 'disabled';
      /**
       * @description Slug uniqueness configuration.
       * no = no unique constraint
       * local = must be unique within this component type
       * global = must be unique across all component types
       *
       * @enum {string}
       */
      unique?: 'no' | 'local' | 'global';
      /** @description Regular expression slugs must match */
      regularExpression?: string;
      /**
       * @description Custom error message when regular expression validation fails.
       * Has no effect if `regularExpression` is not set.
       */
      regularExpressionMessage?: string;
    };
    /** @description The definition of a component variant */
    ComponentDefinitionVariant: {
      id: components['schemas']['PublicIdProperty'];
      /** @description Friendly name of the variant */
      name: string;
    };
    /** @description Permission set for a component defintion */
    ComponentDefinitionPermission: {
      roleId: components['schemas']['PublicIdProperty'];
      /**
       * @description Permission type for this permission ComponentDefinition:
       * read | write | create | delete
       *
       * @enum {string}
       */
      permission: 'read' | 'write' | 'create' | 'delete';
      /** @description State of the component that this permission applies to */
      state: number;
    };
    /** @description Defines a component type that can live on a Composition */
    ComponentDefinition: {
      id: components['schemas']['PublicIdProperty'];
      /** @description Friendly name of the component definition */
      name: string;
      /**
       * @description Icon name or URL for the component definition (e.g. 'screen' or 'https://s3/my-component.jpg')
       * @default screen
       */
      icon?: string;
      /**
       * @description The public ID of the parameter whose value should be used to create a display title for this component in the UI.
       * The parameter type must support being used as a title parameter for this to work.
       */
      titleParameter?: string | undefined;
      /**
       * @description Whether this component type can be the root of a composition. If false, this component is only used within slots on other components.
       * @default false
       */
      canBeComposition?: boolean;
      /** @description The parameters for this component. Parameters are key-value pairs that can be anything from text values to links to CMS entries. */
      parameters?: components['schemas']['ComponentDefinitionParameter'][];
      /**
       * @description if this component uses team permissions or custom permissions
       * @default true
       */
      useTeamPermissions?: boolean;
      /** @description Custom role permissions for this component definition */
      permissions?: components['schemas']['ComponentDefinitionPermission'][];
      /** @description The named slots for this component; placement areas where arrays of other components can be added. */
      slots?: components['schemas']['ComponentDefinitionSlot'][];
      slugSettings?: components['schemas']['ComponentDefinitionSlugSettings'];
      /** @description Default component instance value */
      defaults?: components['schemas']['ComponentInstance'] | undefined;
      /** @description Named variants for this component; enables creation of visual variants that use the same parameter data */
      variants?: components['schemas']['ComponentDefinitionVariant'][];
      /** @description Created date string for this definition (ignored for writes) */
      created?: string;
      /** @description Last modified date string for this definition (ignored for writes) */
      updated?: string;
    };
    /** @description Defines an editable parameter on a component. */
    ComponentParameter: {
      /** @description The value of the parameter. Any JSON-serializable value is acceptable. */
      value: unknown;
      /** @description The type of the parameter. Determines how it is displayed when editing, and tells the consumer how to process it. */
      type: string;
      binding?: components['schemas']['ComponentParameterBinding'];
    };
    /**
     * @deprecated
     * @description Defines a binding from a resource data value to a component parameter value. Do not use.
     */
    ComponentParameterBinding: {
      /** @description A JSON Pointer expression that defines the binding directly to the parameter value */
      pointer: string;
      /**
       * @description The syntax of the binding (currently always 'jptr')
       * @enum {string}
       */
      syntax: 'jptr';
      /**
       * @description Whether the binding should cause an error if it cannot be resolved.
       * If true, and the binding cannot be resolved, an error will be returned by the binding process.
       * If false, and the binding cannot be resolved, the parameter will be removed from the bound composition.
       *
       * @default false
       */
      required?: boolean;
    };
    /** @description Defines the shape of a component instance served by the composition API. */
    ComponentInstance: {
      /** @description Type of the component instance (public_id of its definition) */
      type: string;
      /** @description Component parameter values for the component instance */
      parameters?: {
        [key: string]: components['schemas']['ComponentParameter'];
      };
      /** @description Public ID of alternate visual appearance for this component, if any selected */
      variant?: string;
      /** @description Slots containing any child components */
      slots?: { [key: string]: components['schemas']['ComponentInstance'][] };
      /** @description Unique identifier of the component within the composition. This is not set unless specifically requested via `withComponentIDs` API parameter. */
      _id?: string;
      /** @description Indicates this component instance should be sourced from a pattern library pattern. */
      _pattern?: string;
      /**
       * @deprecated
       * @description Data definitions coming from a pattern resolved for this component. Merged with _data during resolution.
       * Means nothing for PUTs; it will be ignored.
       */
      _patternData?: { [key: string]: unknown };
      /**
       * @description Describes why the pattern could not be resolved, if a pattern could not be resolved. For PUTs, this is allowed but ignored.
       * CYCLIC: A cyclic pattern graph was detected, which could not be resolved because it would cause an infinite loop.
       * NOTFOUND: The pattern ID referenced could not be found. It may have been deleted, or not be published yet.
       * Means nothing for PUTs; it will be ignored.
       *
       * @enum {string}
       */
      _patternError?: 'NOTFOUND' | 'CYCLIC';
    };
  };
}

export interface operations {}

export interface external {}
