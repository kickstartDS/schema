{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../src/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["const AjvConstructor = require('ajv');\nconst fs = require('fs-extra');\nconst glob = require('fast-glob');\nconst path = require('path');\n\n// TODO I hate that require / import usage is mixed here -_-\nimport traverse from 'json-schema-traverse';\nimport uppercamelcase from 'uppercamelcase';\nimport { JSONSchema7, JSONSchema7Definition } from 'json-schema';\nimport Ajv from 'ajv/dist/core';\nimport _ from 'lodash';\nimport { createHash } from \"crypto\";\n\nexport const getSchemaRegistry = (): Ajv => {\n  const ajv = new AjvConstructor({\n    removeAdditional: true,\n    validateSchema: true,\n    schemaId: '$id',\n    allErrors: true\n  }) as Ajv;\n\n  // TODO update JSON Schema, clean up ignored formats\n  const ignoredFormats = ['image', 'video', 'color', 'markdown', 'id', 'date', 'uri', 'email', 'html', 'uuid', 'date-time'];\n  ignoredFormats.forEach((ignoredFormat) =>\n    ajv.addFormat(ignoredFormat, { validate: () => true })\n  );\n\n  ajv.addKeyword({\n    keyword: \"faker\",\n    schemaType: \"string\",\n    validate: () => true,\n  });\n\n  return ajv;\n};\n\nexport const addExplicitAnyOfs = (jsonSchema: JSONSchema7, ajv: Ajv): JSONSchema7[] => {\n  const schemaAnyOfs: JSONSchema7[] = [];\n\n  traverse(jsonSchema, {\n    cb: (schema, pointer, rootSchema) => {\n      if (schema.items && schema.items.anyOf) {\n        const componentPath = rootSchema.$id.split('/');\n        const componentType = path.basename(rootSchema.$id).split('.')[0];\n        const componentName = uppercamelcase(componentType);\n\n        schema.items.anyOf = schema.items.anyOf.map((anyOf: JSONSchema7) => {\n          if (anyOf.$ref) return anyOf;\n\n          const schemaName = `http://schema.kickstartds.com/${componentPath[3]}/${componentType}/${pointer.split('/').pop()}-${anyOf.title.replace(componentName, '').toLowerCase()}.interface.json`;\n          const schemaAnyOf = {\n            $id: schemaName,\n            $schema: \"http://json-schema.org/draft-07/schema#\",\n            ...anyOf,\n            definitions: jsonSchema.definitions\n          };\n          schemaAnyOfs.push(schemaAnyOf);\n          addJsonSchema(schemaAnyOf, ajv);\n\n          return { $ref: schemaName };\n        });\n      }\n    }\n  });\n\n  return schemaAnyOfs;\n}\n\nexport const mergeAnyOfEnums = (schema: JSONSchema7, ajv: Ajv): void => {\n  traverse(schema, {\n    cb: (subSchema, pointer, rootSchema) => {\n      const propertyName = pointer.split('/').pop();\n\n      if (\n        subSchema.anyOf &&\n        subSchema.anyOf.length === 2 &&\n        subSchema.anyOf.every((anyOf: JSONSchema7) => (anyOf.type === 'string' && anyOf.enum) || (anyOf.$ref && anyOf.$ref.includes(`properties/${propertyName}`))) &&\n        (\n          (\n            rootSchema.allOf &&\n            rootSchema.allOf.length === 2 &&\n            rootSchema.allOf.some((allOf: JSONSchema7) => allOf.properties && (allOf.properties[propertyName] as JSONSchema7)?.anyOf)\n          ) || (\n            rootSchema.properties &&\n            Object.keys(rootSchema.properties).length > 0 &&\n            rootSchema.properties[propertyName]\n          )\n        )\n      ) {\n        subSchema.type = subSchema.anyOf[0].type;\n        subSchema.default = subSchema.anyOf[0].default;\n        subSchema.enum = subSchema.anyOf.reduce((enumValues: [string], anyOf: JSONSchema7) => {\n          const values = anyOf.enum || (anyOf.$ref && (ajv.getSchema(anyOf.$ref).schema as JSONSchema7).enum);\n          values.forEach((value) => {\n            if (!enumValues.includes(value as string)) enumValues.push(value as string);\n          });\n          return enumValues;\n        }, []);\n\n        if (rootSchema.allOf && rootSchema.allOf.some((allOf: JSONSchema7) => allOf.$ref)) {\n          delete (ajv.getSchema(rootSchema.allOf.find((allOf: JSONSchema7) => allOf.$ref).$ref).schema as JSONSchema7).properties[propertyName];\n        }\n\n        delete subSchema.anyOf;\n      }\n    },\n  });\n};\n\n// this method should potentially be replaced by something \"more\"\n// standard, like: https://github.com/mokkabonna/json-schema-merge-allof\n// may result in handling all of those combinations of edge cases\n// ourselves, otherwise\nexport const reduceSchemaAllOf = (schema: JSONSchema7, ajv: Ajv): JSONSchema7 => {\n  const allOfs = schema.allOf as JSONSchema7[];\n\n  const reducedSchema = allOfs.reduce((finalSchema: JSONSchema7, allOf: JSONSchema7) => {\n    const mergeSchemaAllOf = (allOf: JSONSchema7): JSONSchema7 => {\n      if (!_.isUndefined(allOf.$ref)) {\n        const reffedSchema = _.cloneDeep(ajv.getSchema(\n          allOf.$ref.includes('#/definitions/') && !allOf.$ref.includes('http')\n            ? `${schema.$id}${allOf.$ref}`\n            : allOf.$ref\n        )?.schema as JSONSchema7);\n\n        return _.merge(\n          reffedSchema.allOf\n            ? reduceSchemaAllOf(reffedSchema, ajv)\n            : _.merge(reffedSchema, finalSchema),\n          finalSchema,\n        );\n      } else {\n        reduceSchemaAllOfs(allOf, ajv);\n        return _.merge(allOf, finalSchema);\n      }\n    };\n\n    return mergeSchemaAllOf(allOf);\n  }, { } as JSONSchema7);\n\n  if (schema.properties)\n    reducedSchema.properties = _.merge(schema.properties, reducedSchema.properties);\n\n  mergeAnyOfEnums(reducedSchema, ajv);\n\n  return reducedSchema;\n};\n\nexport const reduceSchemaAllOfs = (schema: JSONSchema7, ajv: Ajv): void => {\n  traverse(schema, {\n    cb: (subSchema, pointer, _rootSchema, _parentPointer, parentKeyword, parentSchema) => {\n      if (subSchema.allOf) {\n        if (parentSchema && parentKeyword) {\n          // if those two are equal, we're at the top level of the schema\n          pointer.split('/').pop() === parentKeyword\n            ? parentSchema[parentKeyword] = reduceSchemaAllOf(subSchema, ajv)\n            : parentSchema[parentKeyword][pointer.split('/').pop()] = reduceSchemaAllOf(subSchema, ajv);\n        } else {\n          schema.properties = reduceSchemaAllOf(subSchema, ajv).properties;\n          delete schema.allOf;\n        }\n      }\n    }\n  });\n};\n\nexport const addJsonSchema = (jsonSchema: JSONSchema7, ajv: Ajv) => {\n  if (!(ajv.schemas[jsonSchema.$id] || ajv.refs[jsonSchema.$id])) {\n    ajv.addSchema(jsonSchema);\n  }\n  return jsonSchema;\n};\n\nexport const layerRefs = (jsonSchemas: JSONSchema7[], kdsSchemas: JSONSchema7[]): void => {\n  jsonSchemas.forEach((jsonSchema) => {\n    kdsSchemas.forEach((kdsSchema) => {\n      traverse(kdsSchema, {\n        cb: (subSchema) => {\n          if (!subSchema.$ref || !subSchema.$ref.includes('http')) return;\n\n          const kdsSchemaURL = new URL(jsonSchema.$id);\n          const customSchemaURL = new URL(subSchema.$ref);\n\n          const kdsSchemaURLPathParts = kdsSchemaURL.pathname.split('/');\n          const customSchemaURLPathParts = customSchemaURL.pathname.split('/');\n\n          const kdsSchemaFileName = kdsSchemaURLPathParts.pop();\n          const customSchemaFileName = customSchemaURLPathParts.pop();\n\n          const kdsSchemaPathRest = kdsSchemaURLPathParts.pop();\n          const customSchemaPathRest = kdsSchemaURLPathParts.pop();\n\n          if (\n            kdsSchemaFileName === customSchemaFileName &&\n            (!customSchemaPathRest || (customSchemaPathRest && kdsSchemaPathRest === customSchemaPathRest))\n          ) {\n              subSchema.$ref = jsonSchema.$id;\n          }\n        }\n      });\n    });\n  });\n};\n\nexport const addTypeInterfaces = (jsonSchemas: JSONSchema7[]): void => {\n  jsonSchemas.forEach((jsonSchema) => {\n    jsonSchema.properties = jsonSchema.properties || {};\n    jsonSchema.type = jsonSchema.type || 'object';\n\n    if (jsonSchema.properties.type) {\n      jsonSchema.properties.typeProp = jsonSchema.properties.type;\n    }\n\n    jsonSchema.properties.type = {\n      \"const\": getSchemaName(jsonSchema.$id)\n    };\n  });\n};\n\nexport const inlineDefinitions = (jsonSchemas: JSONSchema7[]): void => {\n  jsonSchemas.forEach((jsonSchema) => {\n    traverse(jsonSchema, {\n      cb: (subSchema, pointer, rootSchema, _parentPointer, parentKeyword, parentSchema) => {\n        if (subSchema.$ref && subSchema.$ref.includes('#/definitions/')) {\n          if (subSchema.$ref.includes('http')) {\n            if (parentKeyword === 'properties') {\n              parentSchema.properties[pointer.split('/').pop()] = jsonSchemas.find((jsonSchema) =>\n                jsonSchema.$id === subSchema.$ref.split('#').shift()\n              ).definitions[subSchema.$ref.split('/').pop()];\n            } else if (parentKeyword === 'allOf') {\n              parentSchema.allOf[pointer.split('/').pop()] = jsonSchemas.find((jsonSchema) =>\n                jsonSchema.$id === subSchema.$ref.split('#').shift()\n              ).definitions[subSchema.$ref.split('/').pop()];\n            }\n          } else {\n            parentSchema[parentKeyword][pointer.split('/').pop()] = rootSchema.definitions[subSchema.$ref.split('/').pop()];\n          }\n        } else if (subSchema.$ref && subSchema.$ref.includes('#/properties/')) {\n          if (parentKeyword === 'properties') {\n            parentSchema.properties[pointer.split('/').pop()] = jsonSchemas.find((jsonSchema) =>\n              jsonSchema.$id === subSchema.$ref.split('#').shift()\n            ).properties[subSchema.$ref.split('/').pop()];\n          }\n        }\n      }\n    });\n  });\n};\n\nexport const collectComponentInterfaces = (jsonSchemas: JSONSchema7[]): Record<string, string[]> => {\n  const interfaceMap: Record<string, string[]> = {};\n\n  jsonSchemas.forEach((jsonSchema) => {\n    traverse(jsonSchema, {\n      cb: (subSchema, pointer) => {\n        if (\n          subSchema.items &&\n          subSchema.items.anyOf &&\n          subSchema.items.anyOf.length > 0 &&\n          subSchema.items.anyOf.every((anyOf: JSONSchema7) => anyOf.$ref)\n        ) {\n          const interfaceName = `${uppercamelcase(getSchemaName(jsonSchema.$id))}Component${uppercamelcase(pointer.split('/').pop())}`;\n\n          subSchema.items.anyOf.forEach((anyOf: JSONSchema7) => {\n            interfaceMap[anyOf.$ref] = interfaceMap[anyOf.$ref] || [];\n            if (!interfaceMap[anyOf.$ref].includes(interfaceName)) {\n              interfaceMap[anyOf.$ref].push(interfaceName);\n            }\n          });\n        };\n      }\n    });\n  });\n\n  return interfaceMap;\n};\n\nexport const collectReferencedSchemaIds = (jsonSchemas: JSONSchema7[], ajv: Ajv): string[] => {\n  const referencedIds: string[] = [];\n\n  jsonSchemas.forEach((jsonSchema) => {\n    traverse(jsonSchema, {\n      cb: (subSchema) => {\n        if (subSchema.$ref && !referencedIds.includes(subSchema.$ref)) {\n          referencedIds.push(subSchema.$ref);\n\n          const schema = ajv.getSchema<JSONSchema7>(subSchema.$ref).schema as JSONSchema7;\n          if (schema) {\n            collectReferencedSchemaIds([schema], ajv).forEach((schemaId) => {\n              if (!referencedIds.includes(schemaId)) {\n                referencedIds.push(schemaId);\n              }\n            });\n          }\n        }\n      }\n    });\n  });\n\n  return referencedIds;\n};\n\nexport const loadSchemaPath = async (schemaPath: string): Promise<JSONSchema7> =>\n  fs.readFile(schemaPath, 'utf-8').then((schema: string) => JSON.parse(schema) as JSONSchema7);\n\nexport const getSchemasForGlob = async (schemaGlob: string): Promise<JSONSchema7[]> =>\n  glob(schemaGlob).then((schemaPaths: string[]) =>\n    Promise.all(schemaPaths.map(async (schemaPath: string) => loadSchemaPath(schemaPath))));\n\nexport const processSchemaGlob = async (schemaGlob: string, ajv: Ajv, typeResolution: boolean = true): Promise<string[]> =>\n  processSchemas(await getSchemasForGlob(schemaGlob), ajv, typeResolution);\n\nexport const processSchemas = async (jsonSchemas: JSONSchema7[], ajv: Ajv, typeResolution: boolean = true): Promise<string[]> => {\n  // TODO this should go (`pathPrefix` / environment dependent paths)\n  const pathPrefix = fs.existsSync('../dist/.gitkeep') ? '../' : ''\n  // load all the schema files provided by `@kickstartDS` itself\n  const schemaGlob = `${pathPrefix}**/node_modules/@kickstartds/*/(lib|cms)/**/*.(schema|definitions).json`;\n  const kdsSchemas = await getSchemasForGlob(schemaGlob);\n\n  // Processing consists of 5 steps currently, that need to be run in this\n  // exact order, because every step builds on the one before it\n\n  // 1. pre-process, before schemas enter `ajv`\n  layerRefs(jsonSchemas, kdsSchemas);\n  if (typeResolution) addTypeInterfaces([...jsonSchemas, ...kdsSchemas]);\n  inlineDefinitions([...jsonSchemas, ...kdsSchemas]);\n\n  // 2. add all schemas to ajv for the following processing steps\n  [...kdsSchemas, ...jsonSchemas].forEach((schema) => {\n    addJsonSchema(schema, ajv);\n  });\n\n  // 3. \"compile\" JSON Schema composition keywords (`anyOf`, `allOf`)\n  const schemaAnyOfs: JSONSchema7[] = [];\n  [...kdsSchemas, ...jsonSchemas].forEach((schema) => {\n    reduceSchemaAllOfs(schema, ajv);\n    mergeAnyOfEnums(schema, ajv);\n\n    // 3. schema-local `anyOf` parts get split into distinct\n    // schemas, with their own unique `$id` for referencing.\n    // all generated schemas get added to `ajv` automatically\n    schemaAnyOfs.push(...addExplicitAnyOfs(schema, ajv));\n  });\n\n  // 4. process new schemas, resulting from adding the distinct\n  // `anyOf`s in the step before\n  if (typeResolution) addTypeInterfaces(schemaAnyOfs);\n  schemaAnyOfs.forEach((schemaAnyOf) => {\n    reduceSchemaAllOfs(schemaAnyOf, ajv);\n  });\n\n  // 5. return list of processed schema `$id`s.\n  // Accessing the full schemas works through `ajv`\n  return [...jsonSchemas, ...kdsSchemas, ...schemaAnyOfs]\n    .map((jsonSchema) => jsonSchema.$id);\n};\n\n// TODO deprecated, should go after refactor\nexport const getLayeredRefId = (refId: string, reffingSchemaId: string, ajv: Ajv): string => {\n  if (!refId.includes('schema.kickstartds.com')) return refId;\n\n  // TODO this needs to actually be handled (definitions could theoretically be overwritten, too)\n  // should go away anyways, though, with the removing of `getLayeredRefId` (-> helpers.ts pre-processing step)\n  if (refId.includes('#/definitions/')) return refId;\n\n  const component = path.basename(refId);\n  const layeredComponent = Object.keys(ajv.schemas).filter((schemaId) => schemaId.includes(component) && !schemaId.includes('schema.kickstartds.com'))\n\n  return layeredComponent.length > 0 && (reffingSchemaId.includes('schema.kickstartds.com') || (!refId.includes('section.schema.json') && reffingSchemaId.includes('section.schema.json')))\n    ? layeredComponent[0]\n    : refId;\n};\n\nexport const getSchemaName = (schemaId: string | undefined): string => {\n  return schemaId && schemaId.split('/').pop()?.split('.').shift() || '';\n};\n\nexport const getSchemasForIds = (schemaIds: string[], ajv: Ajv): JSONSchema7[] =>\n  schemaIds.map((schemaId) =>\n    ajv.getSchema<JSONSchema7>(schemaId).schema as JSONSchema7\n  );\n\n// TODO deprecated, should go after refactor\nexport const toArray = (x: JSONSchema7 | JSONSchema7[] | string | string[]): any[]  =>\n  x instanceof Array ? x : [x];\n\n// TODO deprecated, should go after refactor\nexport const toSchema = (x: JSONSchema7 | string): JSONSchema7 =>\n  x instanceof Object ? x : JSON.parse(x);\n\nexport const getCustomSchemaIds = (schemaIds: string[]): string[] =>\n  schemaIds.filter((schemaId) => !schemaId.startsWith('http://schema.kickstartds.com/'));\n\nexport const getUniqueSchemaIds = (schemaIds: string[]): string[] => {\n  const customSchemaIds = getCustomSchemaIds(schemaIds);\n  const unlayeredSchemaIds = schemaIds.filter((schemaId) =>\n    schemaId.startsWith('http://schema.kickstartds.com/') &&\n    !customSchemaIds.some((customSchemaId) => customSchemaId.endsWith(schemaId.split('/').pop()))\n  );\n\n  return [...customSchemaIds, ...unlayeredSchemaIds];\n}\n\nexport const capitalize = (s: string) => s && s[0].toUpperCase() + s.slice(1);\n\nexport const hashFieldName = (fieldName: string, optionalName?: string): string => {\n  return fieldName.includes('___NODE')\n    ? `${fieldName.replace('___NODE', '')}__${createHash('md5').update(fieldName.replace('___NODE', '') + (optionalName || '')).digest('hex').substr(0,4)}___NODE`\n    : `${fieldName}__${createHash('md5').update(fieldName + (optionalName || '')).digest('hex').substr(0,4)}`;\n};\n\n// TODO pretty sure `fieldName === 'type'` shouldn't be hardcoded here\nexport const dedupe = (schema: JSONSchema7, optionalName?: string): {\n  [key: string]: JSONSchema7Definition;\n} | undefined =>\n  _.mapKeys(schema.properties, (_prop: JSONSchema7Definition, fieldName: string) =>\n    (fieldName.includes('__') || fieldName === 'type') ? fieldName : hashFieldName(fieldName, optionalName)\n  );\n\nexport const dedupeDeep = (schema: JSONSchema7): JSONSchema7 => {\n  traverse(schema, {\n    cb: (subSchema) => {\n      if (subSchema.properties) {\n        subSchema.properties = dedupe(subSchema, getSchemaName(schema.$id))\n      }\n    }\n  });\n\n  return schema;\n}\n\nexport const toPascalCase = (text: string): string =>\n  text.replace(/(^\\w|-\\w)/g, clearAndUpper);\n\nexport const clearAndUpper = (text: string): string =>\n  text.replace(/-/, \" \").toUpperCase();\n"]}